// Generated by gencpp from file abb_irb1200_planning/AbbGraspGoal.msg
// DO NOT EDIT!


#ifndef ABB_IRB1200_PLANNING_MESSAGE_ABBGRASPGOAL_H
#define ABB_IRB1200_PLANNING_MESSAGE_ABBGRASPGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace abb_irb1200_planning
{
template <class ContainerAllocator>
struct AbbGraspGoal_
{
  typedef AbbGraspGoal_<ContainerAllocator> Type;

  AbbGraspGoal_()
    : grasp_id(0)  {
    }
  AbbGraspGoal_(const ContainerAllocator& _alloc)
    : grasp_id(0)  {
  (void)_alloc;
    }



   typedef uint32_t _grasp_id_type;
  _grasp_id_type grasp_id;





  typedef boost::shared_ptr< ::abb_irb1200_planning::AbbGraspGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::abb_irb1200_planning::AbbGraspGoal_<ContainerAllocator> const> ConstPtr;

}; // struct AbbGraspGoal_

typedef ::abb_irb1200_planning::AbbGraspGoal_<std::allocator<void> > AbbGraspGoal;

typedef boost::shared_ptr< ::abb_irb1200_planning::AbbGraspGoal > AbbGraspGoalPtr;
typedef boost::shared_ptr< ::abb_irb1200_planning::AbbGraspGoal const> AbbGraspGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::abb_irb1200_planning::AbbGraspGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::abb_irb1200_planning::AbbGraspGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::abb_irb1200_planning::AbbGraspGoal_<ContainerAllocator1> & lhs, const ::abb_irb1200_planning::AbbGraspGoal_<ContainerAllocator2> & rhs)
{
  return lhs.grasp_id == rhs.grasp_id;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::abb_irb1200_planning::AbbGraspGoal_<ContainerAllocator1> & lhs, const ::abb_irb1200_planning::AbbGraspGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace abb_irb1200_planning

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::abb_irb1200_planning::AbbGraspGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::abb_irb1200_planning::AbbGraspGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::abb_irb1200_planning::AbbGraspGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::abb_irb1200_planning::AbbGraspGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::abb_irb1200_planning::AbbGraspGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::abb_irb1200_planning::AbbGraspGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::abb_irb1200_planning::AbbGraspGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "120008ffefc83cc4fdc00d069e4bd8ad";
  }

  static const char* value(const ::abb_irb1200_planning::AbbGraspGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x120008ffefc83cc4ULL;
  static const uint64_t static_value2 = 0xfdc00d069e4bd8adULL;
};

template<class ContainerAllocator>
struct DataType< ::abb_irb1200_planning::AbbGraspGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "abb_irb1200_planning/AbbGraspGoal";
  }

  static const char* value(const ::abb_irb1200_planning::AbbGraspGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::abb_irb1200_planning::AbbGraspGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# Define the goal\n"
"uint32 grasp_id\n"
;
  }

  static const char* value(const ::abb_irb1200_planning::AbbGraspGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::abb_irb1200_planning::AbbGraspGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.grasp_id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AbbGraspGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::abb_irb1200_planning::AbbGraspGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::abb_irb1200_planning::AbbGraspGoal_<ContainerAllocator>& v)
  {
    s << indent << "grasp_id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.grasp_id);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ABB_IRB1200_PLANNING_MESSAGE_ABBGRASPGOAL_H
