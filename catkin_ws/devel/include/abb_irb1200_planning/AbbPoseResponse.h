// Generated by gencpp from file abb_irb1200_planning/AbbPoseResponse.msg
// DO NOT EDIT!


#ifndef ABB_IRB1200_PLANNING_MESSAGE_ABBPOSERESPONSE_H
#define ABB_IRB1200_PLANNING_MESSAGE_ABBPOSERESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace abb_irb1200_planning
{
template <class ContainerAllocator>
struct AbbPoseResponse_
{
  typedef AbbPoseResponse_<ContainerAllocator> Type;

  AbbPoseResponse_()
    : item_id(0)
    , position_x(0.0)
    , position_y(0.0)
    , position_z(0.0)
    , orientation_x(0.0)
    , orientation_y(0.0)
    , orientation_z(0.0)
    , orientation_w(0.0)
    , time(0)  {
    }
  AbbPoseResponse_(const ContainerAllocator& _alloc)
    : item_id(0)
    , position_x(0.0)
    , position_y(0.0)
    , position_z(0.0)
    , orientation_x(0.0)
    , orientation_y(0.0)
    , orientation_z(0.0)
    , orientation_w(0.0)
    , time(0)  {
  (void)_alloc;
    }



   typedef uint32_t _item_id_type;
  _item_id_type item_id;

   typedef float _position_x_type;
  _position_x_type position_x;

   typedef float _position_y_type;
  _position_y_type position_y;

   typedef float _position_z_type;
  _position_z_type position_z;

   typedef float _orientation_x_type;
  _orientation_x_type orientation_x;

   typedef float _orientation_y_type;
  _orientation_y_type orientation_y;

   typedef float _orientation_z_type;
  _orientation_z_type orientation_z;

   typedef float _orientation_w_type;
  _orientation_w_type orientation_w;

   typedef uint32_t _time_type;
  _time_type time;





  typedef boost::shared_ptr< ::abb_irb1200_planning::AbbPoseResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::abb_irb1200_planning::AbbPoseResponse_<ContainerAllocator> const> ConstPtr;

}; // struct AbbPoseResponse_

typedef ::abb_irb1200_planning::AbbPoseResponse_<std::allocator<void> > AbbPoseResponse;

typedef boost::shared_ptr< ::abb_irb1200_planning::AbbPoseResponse > AbbPoseResponsePtr;
typedef boost::shared_ptr< ::abb_irb1200_planning::AbbPoseResponse const> AbbPoseResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::abb_irb1200_planning::AbbPoseResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::abb_irb1200_planning::AbbPoseResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::abb_irb1200_planning::AbbPoseResponse_<ContainerAllocator1> & lhs, const ::abb_irb1200_planning::AbbPoseResponse_<ContainerAllocator2> & rhs)
{
  return lhs.item_id == rhs.item_id &&
    lhs.position_x == rhs.position_x &&
    lhs.position_y == rhs.position_y &&
    lhs.position_z == rhs.position_z &&
    lhs.orientation_x == rhs.orientation_x &&
    lhs.orientation_y == rhs.orientation_y &&
    lhs.orientation_z == rhs.orientation_z &&
    lhs.orientation_w == rhs.orientation_w &&
    lhs.time == rhs.time;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::abb_irb1200_planning::AbbPoseResponse_<ContainerAllocator1> & lhs, const ::abb_irb1200_planning::AbbPoseResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace abb_irb1200_planning

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::abb_irb1200_planning::AbbPoseResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::abb_irb1200_planning::AbbPoseResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::abb_irb1200_planning::AbbPoseResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::abb_irb1200_planning::AbbPoseResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::abb_irb1200_planning::AbbPoseResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::abb_irb1200_planning::AbbPoseResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::abb_irb1200_planning::AbbPoseResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d9d52dc0406cd19c57387282a98f3e2b";
  }

  static const char* value(const ::abb_irb1200_planning::AbbPoseResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd9d52dc0406cd19cULL;
  static const uint64_t static_value2 = 0x57387282a98f3e2bULL;
};

template<class ContainerAllocator>
struct DataType< ::abb_irb1200_planning::AbbPoseResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "abb_irb1200_planning/AbbPoseResponse";
  }

  static const char* value(const ::abb_irb1200_planning::AbbPoseResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::abb_irb1200_planning::AbbPoseResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# define the result from server\n"
"uint32 item_id\n"
"float32 position_x\n"
"float32 position_y\n"
"float32 position_z\n"
"float32 orientation_x\n"
"float32 orientation_y\n"
"float32 orientation_z\n"
"float32 orientation_w\n"
"uint32 time\n"
;
  }

  static const char* value(const ::abb_irb1200_planning::AbbPoseResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::abb_irb1200_planning::AbbPoseResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.item_id);
      stream.next(m.position_x);
      stream.next(m.position_y);
      stream.next(m.position_z);
      stream.next(m.orientation_x);
      stream.next(m.orientation_y);
      stream.next(m.orientation_z);
      stream.next(m.orientation_w);
      stream.next(m.time);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AbbPoseResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::abb_irb1200_planning::AbbPoseResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::abb_irb1200_planning::AbbPoseResponse_<ContainerAllocator>& v)
  {
    s << indent << "item_id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.item_id);
    s << indent << "position_x: ";
    Printer<float>::stream(s, indent + "  ", v.position_x);
    s << indent << "position_y: ";
    Printer<float>::stream(s, indent + "  ", v.position_y);
    s << indent << "position_z: ";
    Printer<float>::stream(s, indent + "  ", v.position_z);
    s << indent << "orientation_x: ";
    Printer<float>::stream(s, indent + "  ", v.orientation_x);
    s << indent << "orientation_y: ";
    Printer<float>::stream(s, indent + "  ", v.orientation_y);
    s << indent << "orientation_z: ";
    Printer<float>::stream(s, indent + "  ", v.orientation_z);
    s << indent << "orientation_w: ";
    Printer<float>::stream(s, indent + "  ", v.orientation_w);
    s << indent << "time: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.time);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ABB_IRB1200_PLANNING_MESSAGE_ABBPOSERESPONSE_H
