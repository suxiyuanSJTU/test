# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from abb_irb1200_planning/AbbPoseRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class AbbPoseRequest(genpy.Message):
  _md5sum = "0d8eb38d0e52d5a5bbac3df7c2d5155c"
  _type = "abb_irb1200_planning/AbbPoseRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# define the client request
uint32 get_data_signal
"""
  __slots__ = ['get_data_signal']
  _slot_types = ['uint32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       get_data_signal

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(AbbPoseRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.get_data_signal is None:
        self.get_data_signal = 0
    else:
      self.get_data_signal = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.get_data_signal
      buff.write(_get_struct_I().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (self.get_data_signal,) = _get_struct_I().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.get_data_signal
      buff.write(_get_struct_I().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (self.get_data_signal,) = _get_struct_I().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from abb_irb1200_planning/AbbPoseResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class AbbPoseResponse(genpy.Message):
  _md5sum = "d9d52dc0406cd19c57387282a98f3e2b"
  _type = "abb_irb1200_planning/AbbPoseResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# define the result from server
uint32 item_id
float32 position_x
float32 position_y
float32 position_z
float32 orientation_x
float32 orientation_y
float32 orientation_z
float32 orientation_w
uint32 time
"""
  __slots__ = ['item_id','position_x','position_y','position_z','orientation_x','orientation_y','orientation_z','orientation_w','time']
  _slot_types = ['uint32','float32','float32','float32','float32','float32','float32','float32','uint32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       item_id,position_x,position_y,position_z,orientation_x,orientation_y,orientation_z,orientation_w,time

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(AbbPoseResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.item_id is None:
        self.item_id = 0
      if self.position_x is None:
        self.position_x = 0.
      if self.position_y is None:
        self.position_y = 0.
      if self.position_z is None:
        self.position_z = 0.
      if self.orientation_x is None:
        self.orientation_x = 0.
      if self.orientation_y is None:
        self.orientation_y = 0.
      if self.orientation_z is None:
        self.orientation_z = 0.
      if self.orientation_w is None:
        self.orientation_w = 0.
      if self.time is None:
        self.time = 0
    else:
      self.item_id = 0
      self.position_x = 0.
      self.position_y = 0.
      self.position_z = 0.
      self.orientation_x = 0.
      self.orientation_y = 0.
      self.orientation_z = 0.
      self.orientation_w = 0.
      self.time = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_I7fI().pack(_x.item_id, _x.position_x, _x.position_y, _x.position_z, _x.orientation_x, _x.orientation_y, _x.orientation_z, _x.orientation_w, _x.time))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 36
      (_x.item_id, _x.position_x, _x.position_y, _x.position_z, _x.orientation_x, _x.orientation_y, _x.orientation_z, _x.orientation_w, _x.time,) = _get_struct_I7fI().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_I7fI().pack(_x.item_id, _x.position_x, _x.position_y, _x.position_z, _x.orientation_x, _x.orientation_y, _x.orientation_z, _x.orientation_w, _x.time))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 36
      (_x.item_id, _x.position_x, _x.position_y, _x.position_z, _x.orientation_x, _x.orientation_y, _x.orientation_z, _x.orientation_w, _x.time,) = _get_struct_I7fI().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_I7fI = None
def _get_struct_I7fI():
    global _struct_I7fI
    if _struct_I7fI is None:
        _struct_I7fI = struct.Struct("<I7fI")
    return _struct_I7fI
class AbbPose(object):
  _type          = 'abb_irb1200_planning/AbbPose'
  _md5sum = '2d90935736f98770c992f0655b381c24'
  _request_class  = AbbPoseRequest
  _response_class = AbbPoseResponse
